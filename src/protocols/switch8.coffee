module.exports = (helper) ->
  pulsesToBinaryMapping = {
    '0110': '0' #binary 0
    '1010': '1' #binary 1
    '23': ''    #footer
  }
  binaryToPulse = {
    '0': '0110'
    '1': '1010'
  }
  return protocolInfo = {
    name: 'switch8'
    type: 'switch'
    values:
      unit:
        type: "number"
      id:
        type: "number"
      state:
        type: "boolean"
    brands: ["rollingCode"]
    pulseLengths: [500, 1000, 3000, 7250]
    pulseCount: 50
    decodePulses: (pulses) ->
      #binary = helper.map(pulses, pulsesToBinaryMapping)
      if pulses is '01101010011010011010011010010101100110011010010123' or
         pulses is '01101010101001101010100101011001011010011010010123' or
         pulses is '01101010100101101001100110101010010101101010010123' or
         pulses is '01101010101010100101010110101001011001101010010123'
        return result = {
          unit: 'A'
          state: on
        }

      if pulses is '01101010010101100101011001101010010110011010010123' or
         pulses is '01101010011010100101101010011001100101011010010123' or
         pulses is '01101010100101011001101010010110100110101010010123' or
         pulses is '01101010100110011001011010100101011010101010010123'
        return result = {
          unit: 'A'
          state: off
        }

      if pulses is '01101010101001010110100110011010101010010110011023' or
         pulses is '01101010011001010101100101010110010101010110011023' or
         pulses is '01101010101010010110010101100101010110100110011023' or
         pulses is '01101010010101011001010110100110101010100110011023'
        return result = {
          unit: 'B'
          state: on
        }

      if pulses is '01101010010110101010010101010101100101100110011023' or
         pulses is '01101010011001100110011001011010101001100110011023' or
         pulses is '01101010010110010110101001100110011001010110011023' or
         pulses is '01101010100110101010101001101001101001010110011023'
        return result = {
          unit: 'B'
          state: off
        }

      if pulses is '01101010011010100101101010011001100101011010100123' or
         pulses is '01101010100101011001101010010110100110101010100123' or
         pulses is '01101010100110011001011010100101011010101010100123' or
         pulses is '01101010010101100101011001101010010110011010100123'
        return result = {
          unit: 'C'
          state: on
        }

      if pulses is '01101010100101101001100110101010010101101010100123' or
         pulses is '01101010101010100101010110101001011001101010100123' or
         pulses is '01101010011010011010011010010101100110011010100123' or
         pulses is '01101010101001101010100101011001011010011010100123'
        return result = {
          unit: 'C'
          state: off
        }

      if pulses is '01101010011001100110011001011010101001100110101023' or
         pulses is '01101010010110010110101001100110011001010110101023' or
         pulses is '01101010100110101010101001101001101001010110101023' or
         pulses is '01101010010110101010010101010101100101100110101023'
        return result = {
          unit: 'D'
          state: on
        }

      if pulses is '01101010010101011001010110100110101010100110101023' or
         pulses is '01101010101001010110100110011010101010010110101023' or
         pulses is '01101010011001010101100101010110010101010110101023' or
         pulses is '01101010101010010110010101100101010110100110101023'
        return result = {
          unit: 'D'
          state: off
        }

      if pulses is '01101010100101011001101010010110100110100101100123' or
         pulses is '01101010011010100101101010011001100101010101100123' or
         pulses is '01101010010101100101011001101010010110010101100123' or
         pulses is '01101010100110011001011010100101011010100101100123'
        return result = {
          all: true
          state: on
        }

      if pulses is '01101010101010100101010110101001011001100101100123' or
         pulses is '01101010100101101001100110101010010101100101100123' or
         pulses is '01101010101001101010100101011001011010010101100123' or
         pulses is '01101010011010011010011010010101100110010101100123'
        return result = {
          all: true
          state: off
        }

    encodeMessage: (message) ->
      if message.unit is 'A'
        if message.state is on
          return '01101010011010011010011010010101100110011010010123'
        else
          return '01101010010101100101011001101010010110011010010123'

      else if message.unit is 'B'
        if message.state is on
          return '01101010101001010110100110011010101010010110011023'
        else
          return '01101010010110101010010101010101100101100110011023'
      
      else if message.unit is 'C'
        if message.state is on
          return '01101010011010100101101010011001100101011010100123'
        else
          return '01101010100101101001100110101010010101101010100123'

      else if message.unit is 'D'
        if message.state is on
          return '01101010011001100110011001011010101001100110101023'
        else
          return '01101010010101011001010110100110101010100110101023'

      else if message.all? is true
        if message.state is on
          return '01101010100101011001101010010110100110100101100123'
        else
          return '01101010101010100101010110101001011001100101100123'
  }
